#1. Let's examine the tables. What are the column names?

SELECT * FROM trips;
SELECT * FROM riders;
SELECT * FROM cars;

#2. Try out a simple cross join between riders and cars

SELECT riders.first, riders.last, cars.model
FROM riders, cars;

#3. Suppose we want to create a trip long with its users. Find the columns to join between trips and riders and combine the two tables using a LEFT JOIN.
Let trips be the left table.

SELECT * FROM trips
LEFT JOIN riders 
ON trips.rider_id = riders.id;

#4. Suppose we want to create a link between the trips and the cars used during those trips. Find the columns to join on and combine the trips and cars table 
using an INNER JOIN.

SELECT * FROM trips
JOIN cars 
ON trips.car_id = cars.id;

#5. The new riders data are in! There are three new users this month. Stack the riders table on top of the new table named riders2.

ELECT * FROM riders
UNION
SELECT * FROM riders2;

#6. What is the average cost for a 'trip'?

SELECT AVG(cost) FROM trips;

OR

SELECT ROUND(AVG(cost),2) FROM trips;

#7. Lyft is looking to do an email campaign for all the irregular users. Find all the riders who have used Lyft less than 500 times!

SELECT * FROM riders
WHERE total_trips < 500;

#8. Calculate the number of cars that are active.

SELECT COUNT(*) FROM cars
WHERE status = 'active';

#9. Itâ€™s safety recall time for cars that have been on the road for a while. Write a query that finds the two cars that have the highest trips_completed.

SELECT * FROM cars
ORDER BY trips_completed DESC
LIMIT 2;

#10. Which rider has had the most trips?

SELECT * FROM riders
ORDER BY total_trips DESC;

